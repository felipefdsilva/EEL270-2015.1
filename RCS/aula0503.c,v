head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2015.06.03.02.48.03;	author felipe.ferreira;	state Exp;
branches;
next	;


desc
@Programa de testes da funcao DecodificarBase64
@


1.1
log
@Initial revision
@
text
@/*Unversidade Federal do Rio de Janeiro
* Escola Politecnica
* Departamento de Eletronica e de Computacao
* EEL270 - Computacao II - Turma 2015/1
* Prof. Marcelo Luiz Drumond Lanza
* Descrição:
*
* $Author$
* $Date$
* $Log$
* Autor: Felipe Ferreira da Silva
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "aula0501.h"

#define OK						0
#define NUMERO_ARGUMENTOS_INVALIDO			1
#define ARGUMENTO_INVALIDO				2
#define COMPRIMENTO_ARGUMENTO_INVALIDO			3

#define NUMERO_ARGUMENTOS				2
#define TAMANHO_MAXIMO					120*4/3

int
main (int argc, char **argv){

  byte entrada[TAMANHO_MAXIMO];
  byte saida[TAMANHO_MAXIMO*3/4];
  unsigned indice; 
  tipoErros erro;
  char *erros[] = {"Entrada Null", 
		"Saida Null", 
		"Erro de Codificacao", 
		"Erro de Decodificacao",
		"Caractere nao pertence a Base64"};

  if (argc != NUMERO_ARGUMENTOS){
    printf ("Uso: %s <string>\n", argv[0]);
    exit (NUMERO_ARGUMENTOS_INVALIDO);}

  if (strlen(argv[1]) > TAMANHO_MAXIMO){
    printf ("String com no maximo 160 caracteres\n");
    exit (COMPRIMENTO_ARGUMENTO_INVALIDO);}

  for (indice = 0; indice < strlen(argv[1]); indice++)
    entrada[indice] = argv[1][indice];

  if ((erro = DecodificarBase64(entrada,strlen(argv[1]),saida)) != ok)
    printf("%s\n", erros[erro-1]);
    
  else
    printf("%s\n", saida);

  return OK;
}
/*$RCSFile$*/
@
